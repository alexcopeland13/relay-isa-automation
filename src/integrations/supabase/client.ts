
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qvarmbhdradfpkegtpgw.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InF2YXJtYmhkcmFkZnBrZWd0cGd3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU5NzA0MTYsImV4cCI6MjA2MTU0NjQxNn0.nPbIoja88OXjj_0-b_OJzwefRRM1r6T55QljRCxSOuQ";

// Create options for more debugging information
const options = {
  auth: {
    autoRefreshToken: true,
    persistSession: true,
  },
  global: {
    fetch: (url: string, options: RequestInit) => {
      console.log('🔌 Supabase API Request:', url);
      return fetch(url, options);
    },
  },
};

// Log initialization to help debug
console.log('🗄️ Initializing Supabase client with URL:', SUPABASE_URL);
console.log('🔑 Auth key present:', !!SUPABASE_PUBLISHABLE_KEY);

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, options);

// Add a diagnostic function for convenience
export const diagnoseDatabaseConnection = async () => {
  try {
    // First try a basic connection test
    const { data: connectionTest, error: connectionError } = await supabase.from('leads').select('count');
    if (connectionError) {
      console.error('❌ Database connection error:', connectionError);
      return { success: false, error: connectionError, message: connectionError.message };
    }
    
    // Then get detailed information about the leads table structure
    console.log('🔍 Checking leads table structure...');
    const { data: tableInfo, error: tableError } = await supabase
      .rpc('get_table_info', { table_name: 'leads' });
      
    if (tableError) {
      console.log('⚠️ Could not get table info, but this is non-critical. Continuing...');
    } else {
      console.log('📋 Leads table columns:', tableInfo);
    }
    
    // Get all leads without filtering to see what's actually there
    const { data: allLeads, error: leadsError } = await supabase
      .from('leads')
      .select('*');
      
    if (leadsError) {
      console.error('❌ Error fetching leads:', leadsError);
      return { success: false, error: leadsError, message: leadsError.message };
    }
    
    // Log all found leads for debugging
    console.log('📊 All leads in database:', allLeads);
    
    // Check specifically for status values to debug case sensitivity issues
    const statusValues = allLeads?.map(lead => lead.status) || [];
    console.log('📊 Status values found in database:', statusValues);
    
    return { 
      success: true, 
      data: allLeads,
      count: allLeads?.length || 0,
      statusValues 
    };
  } catch (err) {
    console.error('❌ Unexpected database error:', err);
    return { success: false, error: err, message: err instanceof Error ? err.message : String(err) };
  }
};

// Function to insert a test lead with standardized values
export const insertTestLead = async () => {
  try {
    const testLead = {
      first_name: 'Test',
      last_name: `User ${new Date().toLocaleTimeString()}`,
      email: `test${Date.now()}@example.com`,
      phone: '555-123-4567',
      status: 'new', // Use lowercase status consistently
      source: 'manual-test'
    };
    
    console.log('🧪 Inserting test lead:', testLead);
    
    const { data, error } = await supabase
      .from('leads')
      .insert(testLead)
      .select();
      
    return { success: !error, data, error };
  } catch (err) {
    console.error('❌ Error inserting test lead:', err);
    return { success: false, error: err, message: err instanceof Error ? err.message : String(err) };
  }
};

// Add a function to create a stored procedure for table info
export const setupDatabaseHelpers = async () => {
  try {
    // Create utility function to get table information
    const { error } = await supabase.rpc('create_get_table_info_function');
    
    if (error) {
      console.error('❌ Could not create database helpers:', error);
      return { success: false, error };
    }
    
    return { success: true };
  } catch (err) {
    console.error('❌ Error setting up database helpers:', err);
    return { success: false, error: err };
  }
};
